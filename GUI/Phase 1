import tkinter as tk
import subprocess

class WifiGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Wi-Fi Connection")
        
        # Create labels and entry widgets for SSID and password
        tk.Label(master, text="SSID:").grid(row=0)
        self.ssid_entry = tk.Entry(master)
        self.ssid_entry.grid(row=0, column=1)
        
        tk.Label(master, text="Password:").grid(row=1)
        self.password_entry = tk.Entry(master, show="*")
        self.password_entry.grid(row=1, column=1)
        
        # Create button to connect to Wi-Fi
        tk.Button(master, text="Connect", command=self.connect_wifi).grid(row=2, column=1)
        
        # Create label to display connection status
        self.status_label = tk.Label(master, text="")
        self.status_label.grid(row=3, columnspan=2)
        
    def connect_wifi(self):
        # Get SSID and password from entry widgets
        ssid = self.ssid_entry.get()
        password = self.password_entry.get()
        
        # Run netsh command to connect to Wi-Fi
        command = f"netsh wlan connect ssid={ssid} keyMaterial={password}"
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        
        # Display connection status
        if "successfully" in output.decode():
            self.status_label.config(text="Connected!")
        else:
            self.status_label.config(text="Connection failed.")
    
class RoboticArmGUI:
    def __init__(self, master):

      #  self.root = tk.Tk()
     #   self.root.title("Robotic Arm Control Software")
        self.master = master
        self.master.title("Car Controller")

        # Set initial joint positions
        self.joint_positions = [0, 0, 0, 0, 0, 0]

        # Create GUI elements
        self.label = tk.Label(master, text="Joint Positions:")
      #  self.label.pack()
        dash = tk.Label(master, text=f"  ")
        
        self.position_labels = []
        for i in range(6):
            dash.grid(row=i, column= 0)
            position_label = tk.Label(master, text=f"Joint {i+1}: {self.joint_positions[i]}")
         #   position_label.pack()
            position_label.grid(row= i, column=2+3)
            self.position_labels.append(position_label)

        self.plus_buttons = []
        self.minus_buttons = []
        
        for i in range(6):
            plus_button = tk.Button(master, text="+", padx=15, pady=10 ,command=lambda index=i: self.increment_position(index))
         #   plus_button.pack(side=tk.LEFT, padx=10, pady=10)
            plus_button.grid(row=i , column=3+3)
            self.plus_buttons.append(plus_button)

            minus_button = tk.Button(master, text="-", padx=15, pady=10 ,command=lambda index=i: self.decrement_position(index))
         #   minus_button.pack(side=tk.LEFT)
            minus_button.grid(row=i , column=1+3)
            self.minus_buttons.append(minus_button)

        self.reset_button = tk.Button(master, text="Reset Position", padx=25, pady=10 ,command=self.reset_position).grid(row=6,column=5)
       # self.reset_button.pack(side=tk.BOTTOM, padx=25, pady=10)

    def increment_position(self, index):
        # Increment joint position and update position label
        self.joint_positions[index] += 10
        self.position_labels[index].config(text=f"Joint {index+1}: {self.joint_positions[index]}")

    def decrement_position(self, index):
        # Decrement joint position and update position label
        self.joint_positions[index] -= 10
        self.position_labels[index].config(text=f"Joint {index+1}: {self.joint_positions[index]}")

    def run(self):
        self.root.mainloop()
    
    def reset_position(self):
        # Reset the array to an empty list and update the display label
        for i in range(6):
            self.joint_positions[i] = 0
            self.position_labels[i].config(text=f"Joint {i+1}: {self.joint_positions[i]}")

# Create root window and start main loop
root = tk.Tk()

# Create and pack the Wi-Fi and car controllers in the root window
wifi_controller = WifiGUI(root)
car_controller = RoboticArmGUI(root)

root.mainloop()